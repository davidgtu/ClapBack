{"version":3,"sources":["components/styles/breakpoints.js","GlobalStyle.js","components/styles/colors.js","components/Title/emoji.js","components/Title/title.jsx","components/Subtitle/subtitle.jsx","components/TextInput/styles.js","components/TextInput/output.jsx","components/TextInput/textarea.jsx","components/icons/closeIcon.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BreakpointWidth","smallScreen","tablet","tabletLarge","tabletXLarge","desktop","desktopLarge","desktopXLarge","desktopXXLarge","Object","keys","reduce","mediaQueries","label","objectSpread","defineProperty","_len","arguments","length","args","Array","_key","css","_templateObject","call","apply","_this","concat","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","Emoji","_ref","icon","emoji","baseUrl","ext","size","EMOJIS","Title","react_default","a","createElement","TitleContainer","map","EmojiContainer","key","emoji_Emoji","styled","div","title_templateObject","_templateObject2","Subtitle","Container","SubtitleText","subtitle_templateObject","h2","subtitle_templateObject2","TextareaStyles","styles_templateObject","Output","text","TextareaContainer","output_Textarea","value","placeholder","readOnly","Textarea","textarea","output_templateObject","output_templateObject2","_useState","useState","_useState2","slicedToArray","setText","_useState3","_useState4","pureText","setPureText","textarea_Container","textarea_TextareaContainer","StyledCloseIcon","onClick","TextareaInput","onChange","e","target","replace","output_Output","textarea_templateObject","textarea_templateObject2","_templateObject3","props","esm_extends","x1","y1","x2","y2","stroke","strokeWidth","_templateObject4","App","useEffect","document","title","Fragment","BodyContainer","App_Container","title_Title","subtitle_Subtitle","textarea_Textarea","App_templateObject","App_templateObject2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43be8a0e.chunk.js","sourcesContent":["import { css } from 'styled-components';\n\nconst BreakpointWidth = {\n  smallScreen: 380,\n  tablet: 580,\n  tabletLarge: 640,\n  tabletXLarge: 768,\n  desktop: 800,\n  desktopLarge: 1024,\n  desktopXLarge: 1280,\n  desktopXXLarge: 1920,\n};\n\nexport const media = Object.keys(BreakpointWidth).reduce(\n  (mediaQueries, label) => (\n    {\n      ...mediaQueries,\n      [label]: (...args) => css`\n        @media (min-width: ${BreakpointWidth[label]}px) {\n          ${css.call(this, ...args)}\n        }\n      `,\n    }\n  ),\n  {},\n);","import { createGlobalStyle } from 'styled-components';\nimport { millenialPink, offBlack } from './components/styles';\n\nexport const GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Lato');\n  @font-face {\n    font-family: \"Cooper Black\";\n    src: local('Cooper Black'), url('fonts/Cooper Black Regular.ttf') format(\"ttf\"),\n         local('Cooper Black'), url('fonts/cooper_black_regular-webfont.woff') format(\"woff\"),\n         local('Cooper Black'), url('fonts/cooper_black_regular-webfont.woff2') format(\"woff2\");\n  }\n\n  body {\n    padding: 0;\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    background-color: ${millenialPink};\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0;\n    font-family: \"Cooper Black\";\n    color: ${offBlack};\n  }\n\n  p, textarea, li, ol, span {\n    font-family: 'Lato', sans-serif;\n  }\n\n  textarea {\n    resize: none;\n  }\n`;","export const millenialPink = '#fa9fa6';\nexport const offBlack = '#242424';\nexport const white = '#fff';\nexport const borderGray = '#ccd1d9';\nexport const disabledGray = '#f0f0f0';","import emoji from 'react-easy-emoji';\n\nexport const Emoji = ({ icon }) => (\n  emoji(icon, {\n    baseUrl: '//twemoji.maxcdn.com/2/svg/',\n    ext: '.svg',\n    size: '',\n  })\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Emoji } from './emoji';\n\nconst EMOJIS = ['👏', '🔙']\n\nexport const Title = () => (\n  <TitleContainer>\n    {EMOJIS.map(icon =>\n      <EmojiContainer key={icon}>\n        <Emoji icon={icon} />\n      </EmojiContainer>\n    )}\n  </TitleContainer>\n);\n\nconst TitleContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 64px;\n  margin-bottom: 24px;\n\n  img {\n    width: 100px!important;\n    height: 100px!important;\n  }\n`;\n\nconst EmojiContainer = styled.div`\n  &:first-child {\n    margin-right: 25px;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const Subtitle = () => (\n  <Container>\n    <SubtitleText>go ahead, #throwshade</SubtitleText>\n  </Container>\n);\n\nconst Container = styled.div`\n  text-align: center;\n`;\n\nconst SubtitleText = styled.h2`\n  font-size: 42px;\n  font-weight: 200;\n  margin-top: 24px;\n`;","import { css } from 'styled-components';\nimport { white } from '../styles';\n\nexport const TextareaStyles = css`\n  width: 325px;\n  height: 192px;\n  border-radius: 3px;\n  border: 0;\n  background-color: ${white};\n  font-size: 22px;\n  outline: none;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { TextareaStyles } from './styles';\nimport { disabledGray, borderGray } from '../styles';\n\nexport const Output = ({ text }) => (\n  <TextareaContainer>\n    <Textarea\n      value={text}\n      placeholder=\"We'll provide the applause\"\n      readOnly\n    />\n  </TextareaContainer>\n)\n\nconst Textarea = styled.textarea`\n  ${TextareaStyles}\n  background-color: ${disabledGray};\n`;\n\nconst TextareaContainer = styled.div`\n  box-shadow: inset 1px 1px 3px 0 ${borderGray};\n  border: solid 1px ${borderGray};\n  background-color: ${disabledGray};\n  padding: 16px 20px;\n`;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Output } from './output';\nimport { TextareaStyles } from './styles';\nimport { borderGray } from '../styles';\nimport { CloseIcon } from '../icons';\n\nconst format = (text) => text.replace(/ /g, '👏')\n\nexport const Textarea = () => {\n  const [text, setText] = useState('');\n  const [pureText, setPureText] = useState('');\n  const setTexts = (value) => {\n    setText(format(value));\n    setPureText(value);\n  }\n\n  const clearText = () => {\n    setText('');\n    setPureText('');\n  }\n\n  return (\n    <Container>\n      <TextareaContainer>\n        {!!pureText && <StyledCloseIcon onClick={clearText} />}\n        <TextareaInput\n          value={pureText}\n          onChange={(e) => setTexts(e.target.value)}\n          placeholder=\"Type out your comeback\"\n        />\n      </TextareaContainer>\n      <Output text={text} />\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  margin: 45px auto 0;\n  display: flex;\n  justify-content: center;\n`;\n\nconst TextareaInput = styled.textarea`\n  ${TextareaStyles}\n`;\n\nconst TextareaContainer = styled.div`\n  box-shadow: inset 1px 1px 3px 0 ${borderGray};\n  border: solid 1px ${borderGray};\n  padding: 16px 30px 16px 16px;\n  margin-right: 9px;\n  position: relative;\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  width: 13px;\n  height: 13px;\n  position: absolute;\n  right: 0;\n  top: 12px;\n  padding: 13px;\n  cursor: pointer;\n`;","import React from 'react';\n\nexport const CloseIcon = ({ ...props }) => (\n  <svg {...props}>\n    <line x1=\"1\" y1=\"13\"\n      x2=\"13\" y2=\"1\"\n      stroke=\"black\"\n      strokeWidth=\"1\" />\n    <line x1=\"1\" y1=\"1\"\n      x2=\"13\" y2=\"13\"\n      stroke=\"black\"\n      strokeWidth=\"1\" />\n  </svg>\n);","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport Title from './components/Title';\nimport Subtitle from './components/Subtitle';\nimport TextInput from './components/TextInput';\nimport { white } from './components/styles';\n\nconst App = () => {\n  useEffect(() => { document.title = '👏excuse👏me👏how👏dare👏yuo???👏' })\n\n  return (\n    <>\n      <GlobalStyle />\n      <BodyContainer>\n        <Container>\n          <Title />\n          <Subtitle />\n          <TextInput />\n        </Container>\n      </BodyContainer>\n    </>\n  );\n};\n\nexport default App;\n\nconst BodyContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  background: ${white};\n  margin: 0 auto;\n  max-width: 1000px;\n  width: 100%;\n  padding: 75px 0;\n  border-radius: 3px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.5);\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}